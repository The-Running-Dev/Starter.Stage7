trigger:
  - master

pool:
  vmImage: "ubuntu-18.04"

variables:
  projects: "**/*.csproj"
  buildConfiguration: "Release"
  testProjects: "**/*.Tests/*.csproj"
  testBuildConfiguration: "Test"

  apiProject: "Starter.API"
  apiDockerImage: "boyankostadinov-starter.api"
  apiProjectContext: "$(Build.Repository.LocalPath)/Artifacts/$(apiProject)"

  consumerProject: "Starter.Consumer"
  consumerDockerImage: "boyankostadinov-starter.consumer"
  consumerProjectContext: "$(Build.Repository.LocalPath)/Artifacts/$(consumerProject)"

  containerRegistry: "astracontainerregistry.azurecr.io"
  containerRegistryServiceConnection: "astra_container_registry"

  resourceManagerConnection: "Azure_Dev_Subscription"
  subscriptionId: "e1c5afc5-9085-48e6-b242-e93aeac67b3a"
  resourceGroupName: "boyankostadinov-newstartertask"
  location: "West Europe"

  appServiceTemplate: "app-service"
  serviceBusTemplate: "service-bus"
  storageAccountTemplate: "storage-account"

  artifactsDirectory: "$(Build.Repository.LocalPath)/Artifacts"
  armTemplates: "$(Build.Repository.LocalPath)/Starter.Resources.Azure/*.json"

  manifests: "$(Build.Repository.LocalPath)/Manifests/**"
  kubernetesManifest: "kubernetes-cluster.yml"
  kubernetesServiceConnection: "dev-atra-boyankostadinov-kubernetes"
  kubernetesEnvironment: "dev-astra-boyankostadinov-starter-aksnamespace"

stages:
  - stage: Build
    displayName: Building Application
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: UseDotNet@2
            displayName: "We Still Need 2.2..."
            inputs:
              version: "2.2.x"

          - task: DotNetCoreCLI@2
            displayName: "Converting to Bits..."
            inputs:
              command: build
              projects: "$(projects)"

          - task: DotNetCoreCLI@2
            displayName: "Common, Common, Pass Already..."
            inputs:
              command: test
              projects: "$(testProjects)"
              arguments: "--configuration $(testBuildConfiguration)"

          - task: DotNetCoreCLI@2
            displayName: "Publishing API..."
            inputs:
              command: publish
              projects: "**/$(apiProject)/*.csproj"
              arguments: "--configuration $(buildConfiguration) --output $(apiProjectContext)"
              publishWebProjects: true
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: "Publishing Consumer..."
            inputs:
              command: publish
              projects: "**/$(consumerProject)/*.csproj"
              arguments: "--configuration $(buildConfiguration) --output $(consumerProjectContext)"
              publishWebProjects: false
              zipAfterPublish: false
              modifyOutputPath: false

          - task: Docker@2
            displayName: "Building API Container..."
            inputs:
              containerRegistry: "$(containerRegistryServiceConnection)"
              repository: "$(apiDockerImage)"
              command: build
              dockerfile: "$(apiProject)/Dockerfile"
              buildContext: "$(apiProjectContext)"
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: "Building Consumer Container..."
            inputs:
              containerRegistry: "$(containerRegistryServiceConnection)"
              repository: "$(consumerDockerImage)"
              command: build
              dockerfile: "$(consumerProject)/Dockerfile"
              buildContext: "$(consumerProjectContext)"
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: "Pushing API Image..."
            inputs:
              containerRegistry: "$(containerRegistryServiceConnection)"
              repository: "$(apiDockerImage)"
              command: push
              tags: |
                $(Build.BuildId)
                latest

          - task: Docker@2
            displayName: "Pushing Consumer Image..."
            inputs:
              containerRegistry: "$(containerRegistryServiceConnection)"
              repository: "$(consumerDockerImage)"
              command: push
              tags: |
                $(Build.BuildId)
                latest

          - task: CopyFiles@2
            displayName: "Copying Manifests to Artifacts..."
            inputs:
              contents: "$(manifests)"
              targetFolder: "$(artifactsDirectory)/manifests"

          - task: CopyFiles@2
            displayName: "Copying Templates to Artifacts..."
            inputs:
              contents: "$(armTemplates)"
              targetFolder: "$(artifactsDirectory)/templates"

          - task: PublishPipelineArtifact@1
            displayName: "Publishing Artifacts..."
            inputs:
              artifactName: "artifacts"
              targetPath: "$(artifactsDirectory)"

  - stage: Deploy
    displayName: "Deploying Applications"
    dependsOn: Build

    jobs:
      - deployment: Deploy
        condition: succeeded()
        displayName: "Deploying to Dev"
        environment: "$(kubernetesEnvironment)"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@1
                  displayName: "Downloading Artifacts..."
                  inputs:
                    buildType: "current"
                    artifactName: "artifacts"
                    targetPath: "$(System.ArtifactsDirectory)"

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: "Deploying App Service Resources..."
                  inputs:
                    deploymentScope: "Resource Group"
                    azureResourceManagerConnection: "$(resourceManagerConnection)"
                    subscriptionId: "$(subscriptionId)"
                    action: 'Create Or Update Resource Group'
                    resourceGroupName: "$(resourceGroupName)"
                    location: "$(location)"
                    templateLocation: 'Linked artifact'
                    csmFile: "$(System.ArtifactsDirectory)/templates/$(appServiceTemplate).json"
                    csmParametersFile: "$(System.ArtifactsDirectory)/templates/$(appServiceTemplate).parameters.json"
                    deploymentMode: "Incremental"

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: "Deploying Service Bus Resources..."
                  inputs:
                    deploymentScope: "Resource Group"
                    azureResourceManagerConnection: "$(resourceManagerConnection)"
                    subscriptionId: "$(subscriptionId)"
                    action: 'Create Or Update Resource Group'
                    resourceGroupName: "$(resourceGroupName)"
                    location: "$(location)"
                    templateLocation: 'Linked artifact'
                    csmFile: "$(System.ArtifactsDirectory)/templates/$(serviceBusTemplate).json"
                    csmParametersFile: '$(System.ArtifactsDirectory)/templates/$(serviceBusTemplate).parameters.json'
                    deploymentMode: "Incremental"

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: "Deploying Storage Account Resources..."
                  inputs:
                    deploymentScope: "Resource Group"
                    azureResourceManagerConnection: "$(resourceManagerConnection)"
                    subscriptionId: "$(subscriptionId)"
                    action: 'Create Or Update Resource Group'
                    resourceGroupName: "$(resourceGroupName)"
                    location: "$(location)"
                    templateLocation: 'Linked artifact'
                    csmFile: "$(System.ArtifactsDirectory)/templates/$(storageAccountTemplate).json"
                    csmParametersFile: '$(System.ArtifactsDirectory)/templates/$(storageAccountTemplate).parameters.json'
                    deploymentMode: "Incremental"

                - task: Kubernetes@1
                  displayName: "Deploying Cluster..."
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: "$(kubernetesServiceConnection)"
                    command: apply
                    arguments: -f $(System.ArtifactsDirectory)/manifests/$(kubernetesManifest)
trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

variables:
  projects: '**/*.csproj'
  buildConfiguration: 'Release'
  testProjects: '**/*.Tests/*.csproj'
  testBuildConfiguration: 'Test'
  imageTag: '$(build.buildId)'
  apiProject: 'Starter.API'
  apiDockerTag: 'boyankostadinov-starter.api'
  apiDockerImage: '$(apiDockerTag):$(imageTag)'
  apiProjectContext: '$(Build.Repository.LocalPath)/Artifacts/$(apiProject)'
  consumerProject: 'Starter.MessageConsumer.Console'
  consumerDockerTag: 'boyankostadinov-starter.messageconsumer.console'
  consumerDockerImage: '$(consumerDockerTag):$(imageTag)'
  consumerProjectContext: '$(Build.Repository.LocalPath)/Artifacts/$(consumerProject)'
  containerRegistryServiceConnection: ''

steps:

- task: UseDotNet@2
  displayName: 'We Still Need 2.2...'
  inputs:
    version: '2.2.x'

- task: DotNetCoreCLI@2
  displayName: 'Converting to Bits...'
  inputs:
    command: build
    projects: '$(projects)'

- task: DotNetCoreCLI@2
  displayName: 'Common, Common, Pass Already...'
  inputs:
    command: test
    projects: '$(testProjects)'
    arguments: '--configuration $(testBuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publishing API...'
  inputs:
    command: publish
    projects: '**/$(apiProject)/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(apiProjectContext)'

- task: DotNetCoreCLI@2
  displayName: 'Publishing Consumer...'
  inputs:
    command: publish
    projects: '**/$(consumerProject)/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(consumerProjectContext)'

- task: Docker@2
  displayName: 'Building API Container...'
  inputs:
    repository: 'astracontainerregistry.azurecr.io/$(apiDockerTag)'
    command: build
    dockerfile: '$(apiProject)/Dockerfile'
    buildContext: '$(apiProjectContext)'

- task: Docker@0
  displayName: 'Push an image'
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Azure_Dev_Subscription'
    azureContainerRegistry: '{"loginServer":"astracontainerregistry.azurecr.io", "id" : "/subscriptions/e1c5afc5-9085-48e6-b242-e93aeac67b3a/resourceGroups/astra-container-registry/providers/Microsoft.ContainerRegistry/registries/astracontainerregistry"}'
    imageName: '$(apiDockerImage)'
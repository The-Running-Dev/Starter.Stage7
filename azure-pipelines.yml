trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

variables:
  projects: '**/*.csproj'
  buildConfiguration: 'Release'
  testProjects: '**/*.Tests/*.csproj'
  testBuildConfiguration: 'Test'
  apiProject: 'Starter.API'
  apiProjectDockerImage: 'starter.api'
  messageConsumerProject: 'Starter.MessageConsumer.Console'
  messageConsumerDockerImage: 'starter.messageconsumer.console'
  API_ARTIFACTS: '$(build.artifactstagingdirectory)/$(apiProject)'
  MESSAGE_CONSUMER_ARTIFACTS: '$(build.artifactstagingdirectory)/$(messageConsumerProject)'

steps:
- task: UseDotNet@2
  displayName: 'We Still Need 2.2...'
  inputs:
    version: '2.2.x'

- task: DotNetCoreCLI@2
  displayName: 'Restoring All the Nugets...'
  inputs:
    command: restore
    projects: '$(projects)'

- task: DotNetCoreCLI@2
  displayName: 'Building All the Codes...'
  inputs:
    command: build
    projects: '$(projects)'

- task: DotNetCoreCLI@2
  displayName: 'Common, Common, Pass All the Tests...'
  inputs:
    command: test
    projects: '$(testProjects)'
    arguments: '--configuration $(testBuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Sending the API over Carrier Pigeons'
  inputs:
    command: publish
    projects: '$(apiProject)/$(apiProject).csproj'
    arguments: '-o $(API_ARTIFACTS)'

- task: DotNetCoreCLI@2
  displayName: 'Sending the Message Consumer over Carrier Pigeons'
  inputs:
    command: publish
    projects: '$(messageConsumerProject)/$(messageConsumerProject).csproj'
    arguments: '-o $(MESSAGE_CONSUMER_ARTIFACTS)'

- task: Docker@2
  displayName: 'Building the API Docker Image...'
  inputs:
    repository: '$(apiProjectDockerImage)'
    command: build
    Dockerfile: '$(apiProject)/Dockerfile'

- task: Docker@2
  displayName: 'Building Message Consumer Docker Image...'
  inputs:
    repository: '$(messageConsumerDockerImage)'
    command: build
    Dockerfile: '$(messageConsumerProject)/Dockerfile'
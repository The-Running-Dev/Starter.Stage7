trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

variables:
  projects: '**/*.csproj'
  buildConfiguration: 'Release'
  testProjects: '**/*.Tests/*.csproj'
  testBuildConfiguration: 'Test'
  imageTag: '$(build.buildId)'
  apiProject: 'Starter.API'
  apiProjectDockerTag: 'boyankostadinov-starter.api'
  apiProjectDockerImage: '$(apiProjectDockerTag):$(imageTag)'
  apiProjectContext: '$(Build.Repository.LocalPath)/Artifacts/$(apiProject)'
  messageConsumerProject: 'Starter.MessageConsumer.Console'
  messageConsumerDockerTag: 'boyankostadinov-starter.messageconsumer.console'
  messageConsumerDockerImage: '$(messageConsumerDockerTag):$(imageTag)'
  messageConsumerProjectContext: '$(Build.Repository.LocalPath)/Artifacts/$(messageConsumerProject)'
  containerRegistry: 'astracontainerregistry.azurecr.io'
  serviceConnection: 'astracontainerregistry'

steps:

- task: UseDotNet@2
  displayName: 'We Still Need 2.2...'
  inputs:
    version: '2.2.x'

- task: DotNetCoreCLI@2
  displayName: 'Converting to Bits...'
  inputs:
    command: build
    projects: '$(projects)'

- task: DotNetCoreCLI@2
  displayName: 'Common, Common, Pass Already...'
  inputs:
    command: test
    projects: '$(testProjects)'
    arguments: '--configuration $(testBuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publishing API...'
  inputs:
    command: publish
    projects: '**/$(apiProject)/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(apiProjectContext)'

- task: DotNetCoreCLI@2
  displayName: 'Publishing Message Consumer...'
  inputs:
    command: publish
    projects: '**/$(messageConsumerProject)/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(messageConsumerProjectContext)'

- task: Docker@2
  displayName: 'Building API Container...'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    dockerfile: '$(apiProject)/Dockerfile'
    imageName: '$(apiProjectDockerImage)'
    includeLatestTag: true
    buildContext: '$(apiProjectContext)'

- task: Docker@1
  displayName: 'Push API Image...'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    command: 'Push an image'
    imageName: '$(apiProjectDockerImage)'
 
- task: Docker@1
  displayName: 'Push API Latest Image...'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    command: 'Push an image'
    imageName: '$(apiProjectDockerImage):latest'

- task: Docker@2
  displayName: 'Building Consumer Container...'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    dockerfile: '$(messageConsumerProject)/Dockerfile'
    imageName: '$(messageConsumerDockerImage)'
    includeLatestTag: true
    buildContext: '$(messageConsumerProjectContext)'

- task: Docker@1
  displayName: 'Push Consumer Image...'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    command: 'Push an image'
    imageName: '$(messageConsumerDockerImage)'
 
- task: Docker@1
  displayName: 'Push Consumer Latest Image...'
  inputs:
    azureSubscriptionEndpoint: $(serviceConnection)
    azureContainerRegistry: $(containerRegistry)
    command: 'Push an image'
    imageName: '$(messageConsumerDockerImage):latest'